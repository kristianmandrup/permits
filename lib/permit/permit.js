// Generated by LiveScript 1.2.0
(function(){
  var Debugger, mixin, permitMixin, Observable, Activation, Register, Repo, Permit;
  Debugger = require('../util').Debugger;
  mixin = require('../mixin');
  permitMixin = require('./mixin');
  Observable = mixin.Observable;
  Activation = permitMixin.Activation;
  Register = permitMixin.Register;
  Repo = permitMixin.Repo;
  module.exports = Permit = (function(){
    Permit.displayName = 'Permit';
    var prototype = Permit.prototype, constructor = Permit;
    importAll$(prototype, arguments[0]);
    importAll$(prototype, arguments[1]);
    importAll$(prototype, arguments[2]);
    importAll$(prototype, arguments[3]);
    importAll$(prototype, arguments[4]);
    function Permit(name, opts){
      this.name = name;
      this.opts = opts;
      this.matchEnabled = false;
      this.debugging = this.opts.debug;
      this.description = this.opts.description || 'no description';
      this._repo = this.opts.repo;
      this.registry = this.opts.registry;
      if (this.activate && this.autoActivate) {
        this.activate();
      }
      if (this._register) {
        this._register();
      }
      this.init();
      this;
    }
    prototype.init = function(){
      this.debug('permit init');
      if (this.applier) {
        this.applier().apply('static');
      }
      return this;
    };
    prototype.match = function(accessRequest){
      return true;
    };
    prototype.rules = function(){
      return {};
    };
    prototype._register = function(){
      throw Error("Not implemented");
    };
    prototype._unregister = function(){
      throw Error("Not implemented");
    };
    return Permit;
  }(Register, Activation, Repo, Observable, Debugger));
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
