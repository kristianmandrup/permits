// Generated by LiveScript 1.2.0
(function(){
  var permit, PermitRegistry, Permit, createPermit, Repo, createRegistry, createRepo;
  require('../../test_setup');
  permit = require('../../../');
  PermitRegistry = permit.registry.PermitRegistry;
  Permit = permit.Permit;
  createPermit = require('../../factories').createPermit;
  Repo = (function(){
    Repo.displayName = 'Repo';
    var prototype = Repo.prototype, constructor = Repo;
    function Repo(debug){
      this.debug = debug;
    }
    prototype.canRules = function(){
      return {};
    };
    prototype.cannotRules = function(){
      return {};
    };
    return Repo;
  }());
  createRegistry = function(debug){
    debug == null && (debug = false);
    return new PermitRegistry(debug);
  };
  createRepo = function(debug){
    debug == null && (debug = false);
    return new Repo(debug);
  };
  describe('PermitRegistry', function(){
    var permits;
    permits = {};
    describe('create instance', function(){
      return specify('should not throw error', function(){
        return function(){
          return createRegistry();
        }.should.not['throw'];
      });
    });
    return context('an instance', function(){
      var reg;
      before(function(){
        return reg = createRegistry();
      });
      describe('initial state', function(){
        describe('permits', function(){
          return specify('should be empty', function(){
            return reg.permits.should.eql({});
          });
        });
        return describe('permit-count', function(){
          return specify('should be 0', function(){
            return reg.permitCount().should.eql(0);
          });
        });
      });
      describe('create a permit', function(){
        before(function(){
          permits.guest = createPermit.guest();
          return permits.guest.registry = createRegistry();
        });
        describe('permits', function(){
          return specify('should have guest permit', function(){
            return reg.permits['guest books'].should.eql(permits.guest);
          });
        });
        return describe('permit-count', function(){
          return specify('should be 1', function(){
            return reg.permitCount().should.eql(1);
          });
        });
      });
      return context('guest permit', function(){
        before(function(){
          permits.guest = createPermit.guest();
          return permits.guest.registry = createRegistry();
        });
        return describe('clean-all', function(){
          return context('cleaned permits', function(){
            var counters, repos;
            counters = {};
            repos = {};
            beforeEach(function(){
              reg.clean();
              permits.guest = createPermit.guest();
              permits.repo = createRepo();
              counters.old = reg.permitCount();
              permits.old = reg.permits;
              repos.old = permits.guest.repo();
              permits.guest.debugOn();
              return permits.guest._registry = reg;
            });
            specify('old repo is a RuleRepo', function(){
              return repos.old.constructor.should.eql(RuleRepo);
            });
            describe('permit-counter', function(){
              return specify('should be reset', function(){
                return reg.permitCount().should.not.eql(counters.old);
              });
            });
            return describe('permits', function(){
              return specify('should change', function(){
                return reg.permits.should.not.eql(permits.old);
              });
            });
          });
        });
      });
    });
  });
}).call(this);
